{"version":3,"sources":["D3.js","App.js","serviceWorker.js","index.js"],"names":["D3","props","createBarChart","bind","this","node","dataMax","max","data","yScale","scaleLinear","domain","range","size","select","selectAll","enter","append","exit","remove","style","attr","d","i","text","ref","width","height","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iQAkEeA,E,kDA5DZ,WAAYC,GAAO,IAAD,8BACf,cAAMA,IACDC,eAAiB,EAAKA,eAAeC,KAApB,gBAFP,E,gEAKfC,KAAKF,mB,2CAOLE,KAAKF,mB,uCAEU,IAAD,OACRG,EAAOD,KAAKC,KACZC,EAAUC,YAAIH,KAAKH,MAAMO,MACzBC,EAASC,cACXC,OAAO,CAAC,EAAGL,IACXM,MAAM,CAAC,EAAGR,KAAKH,MAAMY,KAAK,KACjCC,YAAOT,GACHU,UAAU,QACVP,KAAKJ,KAAKH,MAAMO,MAChBQ,QACAC,OAAO,QAEXH,YAAOT,GACHU,UAAU,QACVP,KAAKJ,KAAKH,MAAMO,MAChBU,OACAC,SAEJL,YAAOT,GACHU,UAAU,QACVP,KAAKJ,KAAKH,MAAMO,MAChBY,MAAM,OAAQ,WACdC,KAAK,KAAK,SAACC,EAAEC,GAAH,OAAa,GAAJA,KACnBF,KAAK,KAAK,SAAAC,GAAC,OAAI,EAAKrB,MAAMY,KAAK,GAAGJ,EAAOa,MACzCD,KAAK,UAAU,SAAAC,GAAC,OAAIb,EAAOa,MAC3BD,KAAK,QAAS,IACdJ,OAAO,SACPO,MAAK,SAACF,GAAD,OAAKA,KAEdR,YAAOT,GACNU,UAAU,QACVP,KAAKJ,KAAKH,MAAMO,MAChBQ,QACAC,OAAO,QACPI,KAAK,KAAK,SAACC,EAAGC,GAAJ,OAAc,GAAJA,KACpBF,KAAK,KAAK,SAACC,EAAGC,GAAJ,OAAU,IAAMd,EAAOa,MACjCD,KAAK,OAAQ,SACbG,MAAK,SAACF,GAAD,OAAKA,O,+BAEJ,IAAD,OAEN,OAAO,yBAAKG,IAAK,SAAApB,GAAI,OAAI,EAAKA,KAAOA,GAC5BqB,MAAO,IAAKC,OAAQ,U,GAzDfC,aCaFC,E,uKAZZ,OACG,yBAAKC,UAAU,OACf,yBAAKA,UAAU,cACf,6CAEA,6BACA,kBAAC,EAAD,CAAItB,KAAM,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAIK,KAAM,CAAC,IAAI,a,GAT9Ce,aCSEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.834d4b18.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './App.css'\r\nimport { scaleLinear } from 'd3-scale'\r\nimport { max } from 'd3-array'\r\nimport { select } from 'd3-selection'\r\nclass D3 extends Component {\r\n   constructor(props){\r\n      super(props)\r\n      this.createBarChart = this.createBarChart.bind(this)\r\n   }\r\n   componentDidMount() {\r\n      this.createBarChart()\r\n      // fetch('https://raw.githubusercontent.com/FreeCodeCamp/ProjectReferenceData/master/GDP-data.json')\r\n      // .then(Response => Response.json())\r\n      // .then(data => this.setState({data}));\r\n      // console.log(this.props.data)\r\n   }\r\n   componentDidUpdate() {\r\n      this.createBarChart()\r\n   }\r\n   createBarChart() {\r\n      const node = this.node\r\n      const dataMax = max(this.props.data)\r\n      const yScale = scaleLinear()\r\n         .domain([0, dataMax])\r\n         .range([0, this.props.size[1]])\r\n   select(node)\r\n      .selectAll('rect')\r\n      .data(this.props.data)\r\n      .enter()\r\n      .append('rect')\r\n   \r\n   select(node)\r\n      .selectAll('rect')\r\n      .data(this.props.data)\r\n      .exit()\r\n      .remove()\r\n   \r\n   select(node)\r\n      .selectAll('rect')\r\n      .data(this.props.data)\r\n      .style('fill', '#fe9922')\r\n      .attr('x', (d,i) => i * 40)\r\n      .attr('y', d => this.props.size[1]-yScale(d))\r\n      .attr('height', d => yScale(d))\r\n      .attr('width', 35)\r\n      .append(\"title\")\r\n      .text((d)=>d)\r\n\r\n   select(node)\r\n   .selectAll('text')\r\n   .data(this.props.data)\r\n   .enter()\r\n   .append('text')\r\n   .attr(\"x\", (d, i) => i * 40)\r\n   .attr(\"y\", (d, i) => 500 - yScale(d) )\r\n   .attr(\"fill\", \"black\")\r\n   .text((d)=>d)\r\n   }\r\nrender() {\r\n   \r\n   return <svg ref={node => this.node = node}\r\n            width={500} height={500}>\r\n            </svg>    \r\n}\r\n}\r\nexport default D3","import React, { Component } from 'react'\nimport './App.css'\nimport D3 from './D3'\nclass App extends Component {\n   \n   render() {\n   return (\n      <div className='App'>\n      <div className='App-header'>\n      <h2>d3 dashboard</h2>\n      </div>\n      <div>\n      <D3 data={[12, 31, 22, 17, 25, 18, 29, 14, 9]} size={[500,500]} />\n      </div>\n      </div>\n   )\n   }\n}\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}